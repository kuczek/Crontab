<?xml version="1.0" encoding="UTF-8"?>
<project name="hexmedia/crontab" default="build" phingVersion=">=2">
    <!-- This variables should be provided by user with -D options. I'm thinking about disallowing to build without them -->
    <property name="deps" value="normal"/>
    <property name="citool" value="local"/>
    <property name="phpversion" value="${php.version}"/>
    <property name="coveralls" value="false"/>

    <property name="build.report.dir" value="./build/report"/>

    <property name="build.report.dir.phpmd" value="${build.report.dir}/phpmd"/>
    <property name="build.report.dir.phpspec" value="${build.report.dir}/phpspec/"/>
    <property name="build.report.dir.phpcs" value="${build.report.dir}/phpcs"/>
    <property name="build.report.dir.phploc" value="${build.report.dir}/phploc"/>
    <property name="build.report.dir.phpdcd" value="${build.report.dir}/phpdcd"/>
    <property name="build.report.dir.behat" value="${build.report.dir}/behat"/>

    <property name="build.phpcs.standard"
              value="${project.basedir}/vendor/hexmedia/code-style/src/Hexmedia/"/>

    <property name="build.config.dir" value="${build.dir}/config"/>
    <property name="build.config.file.phpmd" value="${build.config.dir}/phpmd.xml"/>
    <property name="build.config.file.phpspec" value="${build.config.dir}/phpspec.yml"/>

    <property name="vendor" value="${project.basedir}/vendor"/>
    <property name="bin" value="${vendor}/bin"/>
    <property name="src" value="${project.basedir}/src"/>

    <property name="build.dir" value="${project.basedir}/build"/>

    <property name="composer.file" value="composer.phar"/><!-- For windows -->

    <property environment="env"/>

    <php expression="include('vendor/autoload.php');" level="debug"/>

    <fileset id="project" dir="${src}">
        <include name="**/*.php"></include>
    </fileset>

    <target name="composer-check">
        <if>
            <not>
                <os family="windows"></os>
            </not>
            <then>
                <exec executable="which" outputProperty="composer.file">
                    <arg line="composer"/>
                </exec>

                <if>
                    <available file="${composer.file}" property="composer.exists"/>
                    <then>

                    </then>
                    <else>
                        <if>
                            <equals arg1="${citool}" arg2="local"/>
                            <then>
                                <input message="Enter path to your composer file: " propertyName="composer.file"/>
                            </then>
                        </if>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <target name="do-composer">
        <if>
            <equals arg1="${citool}" arg2="appveyor"/>
            <then>
                <echo message="Cannot call composer on AppVeyor"/>
            </then>
            <else>
                <composer command="${composer.temporary.command}" composer="${composer.file}"/>
            </else>
        </if>
    </target>

    <target name="composer" depends="composer-check">
        <phingcall target="do-composer">
            <param name="composer.temporary.command" value="update"/>
        </phingcall>
        <composer command="install" composer="${composer.file}"/>
    </target>

    <target name="prepare">
        <echo msg="Creating build  directories..."/>
        <delete includeemptydirs="true">
            <fileset dir="${build.report.dir}" includes="**/*"/>
        </delete>
        <mkdir dir="${build.report.dir}"/>
        <mkdir dir="${build.report.dir.phpcs}"/>
        <mkdir dir="${build.report.dir.phpmd}"/>
        <mkdir dir="${build.report.dir.phploc}"/>
        <mkdir dir="${build.report.dir.phpspec}"/>
        <mkdir dir="${build.report.dir.phpdcd}"/>
        <mkdir dir="${build.report.dir.behat}"/>
    </target>

    <target name="rename-configuration-file">
        <property name="exists" value="false"/>
        <available file="${file}.${citool}" type="file" property="exists"/>
        <if>
            <istrue value="${exists}"/>
            <then>
                <delete file="${file}"/>
                <copy file="${file}.${citool}" tofile="${file}"/>
            </then>
        </if>
    </target>

    <target name="configuration-files">
        <!-- especially for travis -->
        <if>
            <and>
                <equals arg1="${citool}" arg2="travis"/>
                <equals arg1="${deps}" arg2="normal"/>
                <equals arg1="${coveralls}" arg2="true"/>
            </and>
            <then>
                <delete file="${build.config.file.phpspec}.travis"/>
                <copy file="${build.config.file.phpspec}.normal.travis"
                      tofile="${build.config.file.phpspec}.travis"/>
            </then>
        </if>

        <phingcall target="rename-configuration-file">
            <property name="file" value="${build.config.file.phpmd}"/>
            <property name="citool" value="${citool}"/>
        </phingcall>
        <phingcall target="rename-configuration-file">
            <property name="file" value="${build.config.file.phpspec}"/>
            <property name="citool" value="${citool}"/>
        </phingcall>
    </target>

    <target name="phpspec" depends="configuration-files">
        <exec dir="${project.basedir}" executable="${bin}/phpspec" checkreturn="true" passthru="true">
            <arg line="--config=${build.config.file.phpspec}"/>
            <arg line="run"/>
            <arg line="-vvv"/>
        </exec>
    </target>

    <target name="phpspec-local">
        <exec dir="${project.basedir}" executable="${bin}/phpspec" output="${build.report.dir.phpspec}/report.xml"
              checkreturn="true">
            <arg line="run"/>
            <arg line="-c"/>
            <arg path="${build.config.file.phpspec}"/>
        </exec>
    </target>

    <target name="behat">
        <if>
            <not>
                <equals arg1="${citool}" arg2="appveyor"/>
            </not>

            <then>
                <if>
                    <equals arg1="${citool}" arg2="travis"/>
                    <then>
                        <exec dir="${project.basedir}" executable="${bin}/behat" checkreturn="true" passthru="true">
                            <arg value="-s"/>
                            <arg value="travis"/>
                        </exec>
                    </then>
                </if>
                <exec dir="${project.basedir}" executable="${bin}/behat" checkreturn="true" passthru="true">
                    <arg value="-s"/>
                    <arg value="default"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpmd" depends="configuration-files">
        <exec dir="${project.basedir}" executable="${bin}/phpmd" output="${build.report.dir.phpmd}/report.xml"
              checkreturn="true">
            <arg line="${src}"/>
            <arg line="xml"/>
            <arg line="${build.config.file.phpmd}"/>
        </exec>
    </target>

    <target name="phpmd-local">
        <exec dir="${project.basedir}" executable="${bin}/phpmd" output="${build.report.dir.phpmd}/report.html"
              checkreturn="true"
              passthru="true">
            <arg line="${src}"/>
            <arg line="html"/>
            <arg line="${build.config.file.phpmd}"/>
        </exec>
    </target>

    <target name="phpcs">
        <phpcodesniffer haltonerror="true" haltonwarning="true" verbosity="1" standard="${build.phpcs.standard}">
            <formatter type="full" outfile="${build.report.dir.phpcs}/report.txt"/>
            <fileset refid="project"/>
        </phpcodesniffer>
    </target>

    <target name="phpcbf">
        <exec dir="${project.basedir}" executable="${bin}/phpcbf">
            <arg line="-w"/>
            <arg line="--standard=${build.phpcs.standard}"/>
            <arg line="${src}"/>
        </exec>
    </target>

    <target name="phploc">
        <phploc reportDirectory="${build.report.dir.phploc}" reportType="xml" reportName="report">
            <fileset refid="project"/>
        </phploc>
    </target>

    <target name="phploc-local">
        <phploc reportDirectory="${build.report.dir.phploc}" reportType="txt" reportName="report">
            <fileset refid="project"/>
        </phploc>
    </target>

    <target name="phpcpd">
        <phpcpd>
            <fileset refid="project"/>
        </phpcpd>
    </target>

    <target name="phpdcd">
        <exec dir="${project.basedir}" command="${bin}/phpdcd" output="${build.report.dir.phpdcd}/report.txt">
            <arg line="${src}"/>
        </exec>
    </target>

    <target name="jsonlint-file">
        <echo message="Checking file: ${absname}" level="debug"/>
        <exec executable="${bin}/jsonlint" dir="${project.basedir}">
            <arg line="${absname}"/>
        </exec>
    </target>

    <target name="yamllint-file">
        <echo message="Checking file: ${absname}" level="debug"/>
        <exec executable="${bin}/yaml-lint" dir="${project.basedir}" outputProperty="response">
            <arg line="${absname}"/>
        </exec>

        <if>
            <contains string="${response}" substring="Unable to parse"/>
            <then>
                <echo message="${response}"/>
                <fail message="Error linting yaml file: ${absname}."/>
            </then>
        </if>
    </target>


    <target name="xmllint-file">
        <echo message="Checkint file: ${absname}" level="debug"/>
        <exec executable="xmllint" dir="${project.basedir}" outputProperty="response">
            <arg line="${absname}"/>
        </exec>

        <if>
            <contains string="${response}" substring="parser error"/>
            <then>
                <echo message="${response}" level="error"/>
                <fail message="Error linting xml file ${absname}."/>
            </then>
        </if>
    </target>

    <target name="lint-files">
        <echo message="Running ${target-task} for ${project.basedir} with **/*.${target-extension}" level="info"/>
        <foreach param="${project.basedir}" absparam="absname" target="${target-task}">
            <fileset dir="${project.basedir}">
                <type type="file"/>
                <include name="**/*.${target-extension}"/>
                <exclude name="vendor/**/*"/>
                <exclude name="build.xml"/>
            </fileset>
        </foreach>
    </target>

    <target name="jsonlint">
        <phingcall target="lint-files">
            <param name="target-task" value="jsonlint-file"/>
            <param name="target-extension" value="json"/>
        </phingcall>
    </target>

    <target name="yamllint">
        <echo message="Running yamllint files."/>
        <phingcall target="lint-files">
            <param name="target-task" value="yamllint-file"/>
            <param name="target-extension" value="yaml"/>
        </phingcall>
        <phingcall target="lint-files">
            <param name="target-task" value="yamllint-file"/>
            <param name="target-extension" value="yml"/>
        </phingcall>
    </target>

    <target name="xmllint">
        <if>
            <and>
                <os family="Unix"></os>
                <!--<available property="xmllint.available" file="${env.PATH}/xmllint"/>-->
            </and>
            <then>
                <phingcall target="lint-files">
                    <param name="target-task" value="xmllint-file"/>
                    <param name="target-extension" value="xml"/>
                </phingcall>
            </then>
            <else>
                <echo message="Trying to run xmllint on non Unix system. Or without xmllint installed." level="error"/>
            </else>
        </if>
    </target>

    <target name="travislint">
        <if>
            <and>
                <os family="Unix"></os>
                <not>
                    <equals arg1="${citool}" arg2="travis"/>
                </not>
            </and>
            <then>
                <exec executable="which" outputProperty="travis.command">
                    <arg line="travis"/>
                </exec>

                <echo message="Travis command is: '${travis.command}'"/>

                <if>
                    <and>
                        <not>
                            <equals arg1="${travis.command}" arg2=""/>
                        </not>
                        <available property="travis.exists" file="${travis.command}"/>
                    </and>
                    <then>
                        <exec executable="${travis.command}" checkreturn="true" outputProperty="travis.output">
                            <arg line="lint"/>
                        </exec>

                        <if>
                            <contains string="${travis.output}" substring="Warnings for .travis.yml"
                                      casesensitive="true"/>
                            <then>
                                <echo message="${travis.output}" level="warning"/>
                                <fail message="Travis crontab is wrong!"/>
                            </then>
                        </if>
                    </then>
                    <else>
                        <echo message="Will not check travis."/>
                    </else>
                </if>
            </then>
            <else>
                <echo message="Will not check travis."/>
            </else>
        </if>
    </target>

    <target name="composerlint" depends="composer-check">
        <phingcall target="do-composer">
            <param name="composer.temporary.command" value="validate"/>
        </phingcall>
    </target>

    <!-- Full tasks -->

    <target name="lint" depends="composerlint,travislint,jsonlint,yamllint,xmllint"/>

    <target name="tests" depends="phpmd, phpcs, phploc, phpcpd, phpspec, behat"/>
    <target name="tests-local" depends="phpmd-local, phpspec-local, behat, phpcs, phploc-local, phpcpd"/>

    <target name="build" depends="prepare,lint,tests-local"/>
    <target name="continous" depends="prepare,lint,tests"/>
</project>
